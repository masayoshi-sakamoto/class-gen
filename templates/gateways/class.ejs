import { <%= appName %>GatewayBase } from './base'
import { to<%= name %>Props, to<%= name %>Seed } from './translator/<%= name.toLowerCase() %>'
import { toOptionsProps } from './translator/options'
import { Get<%= name %>, Get<%= names %>, Post<%= name %>, Put<%= name %>, Delete<%= name %> } from '@/infrastructure/network/<%= appName %>/requests/<%= name.toLowerCase() %>'
import <%= name %>Entity, { I<%= name %>Props } from '@/entities/<%= name %>'
import OptionsEntity, { EmptyOptionsPropsFactory, IOptionsProps } from '@/entities/Options'

export default class <%= name %> extends <%= appName %>GatewayBase {
  async Get<%= name %>(id: string): Promise<I<%= name %>Props | null> {
    const { <%= name.toLowerCase() %> } = await this.apiClient.request(new Get<%= name %>(id))
    return <%= name.toLowerCase() %> ? to<%= name %>Props(<%= name.toLowerCase() %>) : null
  }

  async Get<%= names %>(entity: OptionsEntity): Promise<{ props: I<%= name %>Props[]; options: IOptionsProps }> {
    const { <%= names.toLowerCase() %>, options } = await this.apiClient.request(new Get<%= names %>(entity.params))
    const params = {
      props: <%= names.toLowerCase() %> ? <%= names.toLowerCase() %>.map((prop) => to<%= name %>Props(prop)) : [],
      options: options ? toOptionsProps(options) : EmptyOptionsPropsFactory()
    }
    return params
  }

  async Post<%= name %>(entity: <%= name %>Entity) {
    const { <%= name.toLowerCase() %> } = await this.apiClient.request(new Post<%= name %>(to<%= name %>Seed(entity.props)))
    return <%= name.toLowerCase() %> ? to<%= name %>Props(<%= name.toLowerCase() %>) : null
  }

  async Put<%= name %>(entity: <%= name %>Entity) {
    const { <%= name.toLowerCase() %> } = await this.apiClient.request(new Put<%= name %>(to<%= name %>Seed(entity.props)))
    return <%= name.toLowerCase() %> ? to<%= name %>Props(<%= name.toLowerCase() %>) : null
  }

  async Delete<%= name %>(id: string) {
    await this.apiClient.request(new Delete<%= name %>(id))
  }
}
