<template>
  <<%= name %> :items="items" :title="title" @fetch="fetch" @save="save" @destroy="destroy""></<%= name %>>
</template>

<script lang="ts">
import Vue from 'vue'
import authenticated from '@/middleware/authenticated'
import <%= name %> from '@/components/templates/<%= name %>'
import Fetch<%= names %>UseCase from '@/usecases/<%= name.toLowerCase() %>/Fetch<%= names %>UseCase'
import Save<%= name %>UseCase from '@/usecases/<%= name.toLowerCase() %>/Save<%= name %>UseCase'
import Delete<%= name %>UseCase from '@/usecases/<%= name.toLowerCase() %>/Delete<%= name %>UseCase'
import Update<%= names %>UseCase from '@/usecases/<%= name.toLowerCase() %>/Update<%= names %>UseCase'
import <%= name %>Entity from '@/entities/<%= name %>'
import OptionsEntity from '@/entities/Options'
import { validate } from '@/utils/options'

interface IData {
  items: I<%= name %>List
  title: string
}

export default Vue.extend({
  middleware: [authenticated],
  components: {
    <%= name %>
  },
  async fetch({ App }) {
    App.state.loading = true
    const usecase = new Fetch<%= names %>UseCase(App)
    await usecase.execute(App.<%= name.toLowerCase() %>.options())
    App.state.loading = false
  },
  data(): IData {
    return {
      items: {
        entities: this.App.<%= name.toLowerCase() %>.all(),
        options: this.App.<%= name.toLowerCase() %>.options(),
      },
      title: '<%= japanese %>'
    }
  },
  methods: {
    async fetch(options: OptionsEntity, reload?: boolean) {
      if (validate(options, this.App.<%= name.toLowerCase() %>.options()) || reload) {
        this.App.state.loading = true
        const usecase = new Fetch<%= names %>UseCase(this.App)
        if (await usecase.execute(options)) {
          this.items = {
            entities: this.App.<%= name.toLowerCase() %>.all(),
            options: this.App.<%= name.toLowerCase() %>.options()
          }
        }
        this.App.state.loading = false
      }
    },
    async save(entity: <%= names %>Entity) {
      const usecase = new Save<%= names %>UseCase(this.App)
      this.App.state.loading = true
      if (await usecase.execute(entity)) {
        this.fetch(this.App.<%= name.toLowerCase() %>.options(), true)
        this.App.state.setDialog('<%= name.toLowerCase() %>', false)
      }
      this.App.state.loading = false
    },
    async destroy(entity: <%= names %>Entity) {
      const usecase = new Delete<%= names %>UseCase(this.App)
      this.App.state.loading = true
      if (await usecase.execute(entity)) {
        this.fetch(this.App.<%= name.toLowerCase() %>.options(), true)
      }
      this.App.state.loading = false
    }
  },
  head() {
    return {
      title: this.title
    }
  }
})
</script>
